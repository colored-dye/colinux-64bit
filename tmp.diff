diff -Naur src/colinux/arch/i386/antinx.c src/colinux/arch/x86_64/antinx.c
--- src/colinux/arch/i386/antinx.c	2022-08-10 11:13:31.754067200 +0800
+++ src/colinux/arch/x86_64/antinx.c	2022-08-10 11:13:31.744067200 +0800
@@ -24,11 +24,11 @@
 /* 3.12 TRANSLATION LOOKASIDE BUFFERS (TLBS) */
 #define flush_tlb()							\
 	do {								\
-		unsigned int tmpreg;					\
+		uint64_t tmpreg;					\
 									\
 		__asm__ __volatile__(					\
-			"movl %%cr3, %0;              \n"		\
-			"movl %0, %%cr3;  # flush TLB \n"		\
+			"mov %%cr3, %0;              \n"		\
+			"mov %0, %%cr3;  # flush TLB \n"		\
 			: "=r" (tmpreg)					\
 			:: "memory");					\
 	} while (0)
@@ -37,7 +37,6 @@
 {
 	co_archdep_monitor_t archdep;
 	co_archdep_manager_t marchdep;
-	co_rc_t rc;
 	bool_t pae_enabled;
 	co_pfn_t pfn, pfn_next;
 	uintptr_t cr3;
@@ -49,7 +48,7 @@
 	marchdep = mon->manager->archdep;
 	vaddr = (uintptr_t)mon->passage_page;
 
-	co_debug_lvl(misc, 11, "vaddr = %08lx", vaddr);
+	co_debug_lvl(misc, 11, "vaddr = %08I64x", (int64_t)vaddr);
 
 	if (!(marchdep->caps[1] & (1 << CO_ARCH_AMD_FEATURE_NX))) {
 		co_debug("AMD's NX is not enabled");
@@ -63,12 +62,11 @@
 	}
 
 	cr3 = co_get_cr3();
-	co_debug_lvl(misc, 11, "cr3 = %08lx", cr3);
+	co_debug_lvl(misc, 11, "cr3 = %08I64x", (uint64_t)cr3);
 	pfn = cr3 >> CO_ARCH_PAGE_SHIFT;
-	co_debug("pfn = %08I64x", (uintptr_t)pfn);
+	co_debug("pfn = %08I64x", (uint64_t)pfn);
 	page = co_os_map(mon->manager, pfn);
 	if (!page) {
-		rc = CO_RC(ERROR);
 		goto out;
 	}
 
@@ -76,13 +74,12 @@
 	ptes = ((unsigned long long *)&(page[((cr3 & (~CO_ARCH_PAGE_MASK)) & ~0x1f)]));
 	co_debug_lvl(misc, 11, "ptes = %p", ptes);
 	pfn_next = ptes[vaddr >> CO_ARCH_PAE_PGD_SHIFT] >> CO_ARCH_PAGE_SHIFT;
-	co_debug_lvl(misc, 11, "pfn_next = %08lx", pfn_next);
+	co_debug_lvl(misc, 11, "pfn_next = %08I64x", (uint64_t)pfn_next);
 	co_os_unmap(mon->manager, page, pfn);
 	pfn = pfn_next;
 
 	page = co_os_map(mon->manager, pfn);
 	if (!page) {
-		rc = CO_RC(ERROR);
 		goto out;
 	}
 
@@ -93,13 +90,12 @@
 
 	if (!(*ptes & _PAGE_PSE)) {
 		pfn_next = (*ptes) >> CO_ARCH_PAGE_SHIFT;
-		co_debug_lvl(misc, 11, "pfn_next = %08lx", pfn_next);
+		co_debug_lvl(misc, 11, "pfn_next = %08I64x", (uint64_t)pfn_next);
 		co_os_unmap(mon->manager, page, pfn);
 		pfn = pfn_next;
 
 		page = co_os_map(mon->manager, pfn);
 		if (!page) {
-			rc = CO_RC(ERROR);
 			goto out;
 		}
 
diff -Naur src/colinux/arch/i386/antinx.h src/colinux/arch/x86_64/antinx.h
--- src/colinux/arch/i386/antinx.h	2022-08-10 11:13:31.754067200 +0800
+++ src/colinux/arch/x86_64/antinx.h	2022-08-10 11:13:31.754067200 +0800
@@ -7,8 +7,9 @@
  * the root directory.
  */
 
-#ifndef __COLINUX_ARCH_I386_ANTINX_H__
-#define __COLINUX_ARCH_I386_ANTINX_H__
+#pragma once
+#ifndef __COLINUX_ARCH_X86_64_ANTINX_H__
+#define __COLINUX_ARCH_X86_64_ANTINX_H__
 
 extern co_rc_t co_arch_anti_nx_init(struct co_monitor *cmon);
 extern void co_arch_anti_nx_free(struct co_monitor *cmon);
diff -Naur src/colinux/arch/i386/apic.h src/colinux/arch/x86_64/apic.h
--- src/colinux/arch/i386/apic.h	2022-08-10 11:13:31.754067200 +0800
+++ src/colinux/arch/x86_64/apic.h	2022-08-10 11:13:31.744067200 +0800
@@ -7,8 +7,9 @@
  * the root directory.
  */
 
-#ifndef __COLINUX_ARCH_I386_APIC_H__
-#define __COLINUX_ARCH_I386_APIC_H__
+#pragma once
+#ifndef __COLINUX_ARCH_X86_64_APIC_H__
+#define __COLINUX_ARCH_X86_64_APIC_H__
 
 #include "manager.h"
 
diff -Naur src/colinux/arch/i386/cpuid.c src/colinux/arch/x86_64/cpuid.c
--- src/colinux/arch/i386/cpuid.c	2022-08-10 11:13:31.754067200 +0800
+++ src/colinux/arch/x86_64/cpuid.c	2022-08-10 11:13:31.744067200 +0800
@@ -15,25 +15,26 @@
 	bool_t has_cpuid = 0;
         /*
 	 * This function assumes at least $86.
- 	 *
- 	 * It's good enough...
+	 *
+	 * It's good enough...
 	 */
 
 	asm(
+		/* FIXME: W64: Check, is this code working? */
 		/* Try change the CPUID FLAGS bit (put the old FLAGS in ECX) */
-		"pushfl\n"
-		"popl %%eax\n"
-		"movl %%eax,%%ecx\n"
-		"xorl %1,%%eax\n"
-		"pushl %%eax\n"
-		"popfl\n"
+		"pushf\n"
+		"pop %%rax\n"
+		"mov %%rax,%%rcx\n"
+		"xor %1,%%rax\n"
+		"push %%rax\n"
+		"popf\n"
 
 		/* Read the new FLAGS (and restore the FLAGS from ECX) */
-		"pushfl\n"
-		"popl %%eax\n"
-		"xorl %%ecx,%%eax\n"
-		"pushl %%ecx\n"
-		"popfl\n"
+		"pushf\n"
+		"pop %%rax\n"
+		"xor %%rcx,%%rax\n"
+		"push %%rcx\n"
+		"popf\n"
 
 		/* Was the bit changed? */
 		"movl %3, %0\n"
@@ -49,7 +50,7 @@
 	return has_cpuid;
 }
 
-void co_i386_get_cpuid(uintptr_t op, cpuid_t *cpuid)
+void co_i386_get_cpuid(uint32_t op, cpuid_t *cpuid)
 {
 	asm("cpuid"
 	    : "=a" (cpuid->eax),
@@ -59,10 +60,10 @@
 	    : "0" (op));
 }
 
-co_rc_t co_i386_get_cpuid_capabilities(uintptr_t *caps)
+co_rc_t co_i386_get_cpuid_capabilities(uint32_t *caps)
 {
 	cpuid_t cpuid;
-	uintptr_t highest_op;
+	uint32_t highest_op;
 
 	co_i386_get_cpuid(0, &cpuid);
 	highest_op = cpuid.highest_op;
diff -Naur src/colinux/arch/i386/cpuid.h src/colinux/arch/x86_64/cpuid.h
--- src/colinux/arch/i386/cpuid.h	2022-08-10 11:13:31.754067200 +0800
+++ src/colinux/arch/x86_64/cpuid.h	2022-08-10 11:13:31.744067200 +0800
@@ -7,23 +7,24 @@
  * the root directory.
  */
 
-#ifndef __COLINUX_ARCH_I386_CPUID_H__
-#define __COLINUX_ARCH_I386_CPUID_H__
+#pragma once
+#ifndef __COLINUX_ARCH_X86_64_CPUID_H__
+#define __COLINUX_ARCH_X86_64_CPUID_H__
 
 #include <colinux/common/common.h>
 
 typedef union {
 	struct {
-		uintptr_t eax, ebx, ecx, edx;
+		uint32_t eax, ebx, ecx, edx;
 	};
 	struct {
-		uintptr_t highest_op;
+		uint32_t highest_op;
 		char id_string[12];
 	};
 } cpuid_t;
 
 bool_t co_i386_has_cpuid(void);
-void co_i386_get_cpuid(uintptr_t op, cpuid_t *cpuid);
-co_rc_t co_i386_get_cpuid_capabilities(uintptr_t *caps);
+void co_i386_get_cpuid(uint32_t op, cpuid_t *cpuid);
+co_rc_t co_i386_get_cpuid_capabilities(uint32_t *caps);
 
 #endif
diff -Naur src/colinux/arch/i386/defs.h src/colinux/arch/x86_64/defs.h
--- src/colinux/arch/i386/defs.h	2022-08-10 11:13:31.754067200 +0800
+++ src/colinux/arch/x86_64/defs.h	2022-08-10 11:13:31.754067200 +0800
@@ -9,8 +9,9 @@
  * the root directory.
  */
 
-#ifndef __COLINUX_ARCH_I386_DEFS_H__
-#define __COLINUX_ARCH_I386_DEFS_H__
+#pragma once
+#ifndef __COLINUX_ARCH_X86_64_DEFS_H__
+#define __COLINUX_ARCH_X86_64_DEFS_H__
 
 /*
  * Some declarations copied from Linux.
diff -Naur src/colinux/arch/i386/interrupt.c src/colinux/arch/x86_64/interrupt.c
--- src/colinux/arch/i386/interrupt.c	2022-08-10 11:13:31.754067200 +0800
+++ src/colinux/arch/x86_64/interrupt.c	2022-08-10 11:13:31.754067200 +0800
@@ -11,28 +11,38 @@
 
 static inline void call_intr(void *func)
 {
+		/* FIXME: W64: Check, is this code working? Check with gdb! */
 	asm("    call 1f"                            "\n"
-	    "1:  popl %%eax"                         "\n"
-	    "    addl $2f-1b,%%eax"                  "\n"
-	    "    pushfl"             /* flags */     "\n"
-	    "    pushl %%cs"         /* cs */        "\n"
-	    "    pushl %%eax"        /* eip (2:) */  "\n"
+	    "1:  pop %%rax"                          "\n"
+	    "    add $2f-1b,%%rax"                   "\n"
+	    "    pushf"              /* flags */     "\n"
+	    /*"    push %%cs"*/          /* cs */        "\n"
+	    /* FIXME: W64: Why can't push CS directly here ? */
+	    "    mov %%cs,%%rbx"   "\n"
+	    "    push %%rbx"         /* cs */        "\n"
+	    "    push %%rax"         /* eip (2:) */  "\n"
 	    "    jmp *%0"            /* jmp func */  "\n"
 	    "2:  sti"                                "\n"
-	    : : "r"(func): "eax", "esp");
+	    : : "r"(func): "rax", "rbx", "sp");
 }
 
 void co_monitor_arch_real_hardware_interrupt(co_monitor_t *cmon)
 {
-	struct {
-		unsigned int a, b;
-	} *host;
+	/* 16byte gate */
+	struct gate_struct64 {
+		uint16_t offset_low;
+		uint16_t segment;
+		uint16_t ist_zero0_type_dpl_p;
+		uint16_t offset_middle;
+		uint32_t offset_high;
+		uint32_t zero1;
+	} __attribute__((packed)) *host;
 	void *func;
 
 	host = (typeof(host))(cmon->passage_page->host_state.idt.table);
 	host = &host[co_passage_page->params[0]];
-	func = (void *)((host->b & 0xffff0000) | (host->a & 0x0000ffff));
-
+	func = (void *)(host->offset_low | ((uint64_t)host->offset_middle << 16) | ((uint64_t)host->offset_high << 32));
+	
 	call_intr(func);
 }
 
diff -Naur src/colinux/arch/i386/manager.h src/colinux/arch/x86_64/manager.h
--- src/colinux/arch/i386/manager.h	2022-08-10 11:13:31.754067200 +0800
+++ src/colinux/arch/x86_64/manager.h	2022-08-10 11:13:31.744067200 +0800
@@ -7,8 +7,9 @@
  * the root directory.
  */
 
-#ifndef __COLINUX_ARCH_I386_MANAGER_H__
-#define __COLINUX_ARCH_I386_MANAGER_H__
+#pragma once
+#ifndef __COLINUX_ARCH_X86_64_MANAGER_H__
+#define __COLINUX_ARCH_X86_64_MANAGER_H__
 
 #include <colinux/common/common.h>
 #include <colinux/kernel/manager.h>
@@ -19,7 +20,7 @@
 
 struct co_archdep_manager {
 	bool_t has_cpuid;
-	uintptr_t caps[2];
+	uint32_t caps[2];
 };
 
 struct co_archdep_monitor {
diff -Naur src/colinux/arch/i386/mmu.h src/colinux/arch/x86_64/mmu.h
--- src/colinux/arch/i386/mmu.h	2022-08-10 11:13:31.754067200 +0800
+++ src/colinux/arch/x86_64/mmu.h	2022-08-10 11:13:31.744067200 +0800
@@ -9,9 +9,11 @@
  * the root directory.
  */
 
+#pragma once
 #ifndef __COLINUX_ARCH_I386_MMU_H__
 #define __COLINUX_ARCH_I386_MMU_H__
 
+#include <stdint.h>
 typedef uintptr_t co_pfn_t;
 
 #define PMD_MASK        (~(PMD_SIZE-1))
@@ -27,9 +29,9 @@
 #define _PAGE_PSE       0x080   /* 4 MB (or 2MB) page, Pentium+, if present.. */
 #define CO_ARCH_PAGE_NX        0x8000000000000000ULL
 
-#define PTRS_PER_PTE    1024
+#define PTRS_PER_PTE    512
 #define PGDIR_SHIFT     22
-#define PTRS_PER_PGD    1024
+#define PTRS_PER_PGD    512
 
 #define CO_ARCH_PMD_SHIFT       22
 #define CO_ARCH_PMD_MASK        (~(CO_ARCH_PMD_SIZE-1))
@@ -46,6 +48,6 @@
 #define CO_ARCH_PAGE_SHIFT      12
 #define CO_ARCH_PAGE_SIZE       (1 << CO_ARCH_PAGE_SHIFT)
 #define CO_ARCH_PAGE_MASK       (~(CO_ARCH_PAGE_SIZE-1))
-#define CO_ARCH_KERNEL_OFFSET   0xc0000000
+#define CO_ARCH_KERNEL_OFFSET   0xffffffff80000000
 
 #endif
diff -Naur src/colinux/arch/i386/passage.c src/colinux/arch/x86_64/passage.c
--- src/colinux/arch/i386/passage.c	2022-08-10 11:13:31.754067200 +0800
+++ src/colinux/arch/x86_64/passage.c	2022-08-10 11:13:31.754067200 +0800
@@ -1,21 +1,21 @@
 /*
  * This source code is a part of coLinux source package.
  *
- * Dan Aloni <da-x@colinux.org>, 2003 (c)
- *
  * The code is licensed under the GPL. See the COPYING file at
  * the root directory.
- *
  */
 
 /*
- * The passage page and code are responsible for switching between the
+ * The passage page and code are responsible for switching between the 
  * two operating systems.
+ *
+ * FIXME: W64: This code is not supoorted yet. It is a placeholder only.
  */
 
 #include <colinux/common/debug.h>
 #include <colinux/common/libc.h>
 #include <colinux/common/common.h>
+#include <colinux/common/common64.h>
 #include <colinux/kernel/monitor.h>
 #include <colinux/arch/passage.h>
 #include <colinux/os/kernel/alloc.h>
@@ -27,470 +27,6 @@
 #include "antinx.h"
 #include "defs.h"
 
-#ifdef __MINGW32__
-#define SYMBOL_PREFIX "_"
-#else
-#define SYMBOL_PREFIX ""
-#endif
-
-#ifdef CO_COLINUX_KERNEL
-#error "CO_COLINUX_KERNEL should never defined here"
-#endif
-
-#ifdef CONFIG_COOPERATIVE
-#error "CONFIG_COOPERATIVE should never defined here"
-#endif
-
-/*
- * These two pseudo variables mark the start and the end of the passage code.
- * The passage code is position indepedent, so we just copy it from the
- * driver's text to the passage page which we allocate when we start running.
- */
-
-#define PASSAGE_CODE_WRAP_IBCS(_name_, inner)           \
-extern char _name_;                                     \
-extern char _name_##_end;                               \
-							\
-static inline uintptr_t _name_##_size(void)		\
-{							\
-	return &_name_##_end - &_name_;			\
-}							\
-							\
-static inline void memcpy_##_name_(void *dest)		\
-{							\
-	co_memcpy(dest, &_name_, _name_##_size());	\
-}							\
-							\
-asm(""							\
-    ".globl " SYMBOL_PREFIX #_name_          "\n"	\
-    SYMBOL_PREFIX #_name_ ":"                "\n"	\
-    "    push %ebx"                          "\n"	\
-    "    push %esi"                          "\n"	\
-    "    push %edi"                          "\n"	\
-    "    push %ebp"                          "\n"	\
-    inner						\
-    "    popl %ebp"                          "\n"	\
-    "    popl %edi"                          "\n"	\
-    "    popl %esi"                          "\n"	\
-    "    popl %ebx"                          "\n"	\
-    "    ret"                                "\n"	\
-    ".globl " SYMBOL_PREFIX #_name_ "_end"   "\n"	\
-    SYMBOL_PREFIX #_name_ "_end:;"           "\n"	\
-    "");
-
-#define PASSAGE_CODE_NOWHERE_LAND_SHORT()               \
-    /* Turn off special processor features */           \
-    "    movl %cr4, %ebx"                    "\n"       \
-    "    andl $0xFFFFFF77, %ebx"             "\n"       \
-    "    movl %ebx, %cr4"                    "\n"       \
-/*
- *  Relocate to other map of the passage page.
- *
- *  We do this by changing the current mapping to the passage temporary
- *  address space, which contains the mapping of the passage page at the
- *  two locations which are specific to the two operating systems.
- */							\
-                                                        \
-/* Put the virtual address of the source passage page in EBX */ \
-    "    movl %ecx, %ebx"                    "\n"       \
-    "    andl $0xFFFFF000, %ebx"             "\n"       \
-                                                        \
-/*
- * Take the physical address of the temporary address space page directory
- * pointer and put it in CR3.
- */ \
-    "    movl (%ebx), %eax"                  "\n"       \
-    "    movl %eax, %cr3"                    "\n"       \
-/*
- * Read the 'other_map' field, which is the difference between the two
- * mappings.
- */ \
-    "    movl "CO_ARCH_STATE_STACK_OTHERMAP"(%ebp), %eax"   "\n"  \
-   \
-/*
- * First, we relocate EIP by putting it in 0x64(%ebp). That's why we load
- * ESP with 0x68(%esp). The call that follows puts the EIP where we want.
- * Afterwards the EIP is in %(esp) so we relocate it by adding the
- * relocation offset. We also add the difference between 2 and 3 so that
- * the 'ret' that follows will put us in 3 intead of 2, but in the other
- * mapping.
- */ \
-    "    leal "CO_ARCH_STATE_STACK_RELOCATE_EIP_AFTER"(%ebp), %esp"              "\n"       \
-    "    call 2f"                            "\n"       \
-    "2:  addl %eax, (%esp)"                  "\n"       \
-    "    addl $3f-2b, (%esp)"                "\n"       \
-    "    ret"                                "\n"       \
-    "3:  addl %eax, %ecx"                    "\n"       \
-    "    movl %ecx, %ebp"                    "\n"       \
-
-#define PASSAGE_CODE_NOWHERE_LAND()					\
-    "    movl %ecx, %ebx"                    "\n"			\
-    "    andl $0xFFFFF000, %ebx"             "\n"			\
-    "    movl (%ebx), %edx"                  "\n"			\
-    "    movl %edx, %eax"                    "\n"			\
-    "    leal "CO_ARCH_STATE_STACK_RELOCATE_EIP_AFTER"(%ebp), %esp"           "\n" \
-    "    call 2f"                            "\n"			\
-    "2:  pop %ebx"                           "\n"			\
-    "    andl $0x00000FFF, %ebx"             "\n"			\
-    "    orl %eax, %ebx"                     "\n"			\
-    "    addl $3f-2b, %ebx"                  "\n"			\
-    "    movl "CO_ARCH_STATE_STACK_TEMP_CR3"(%ebp), %eax"  "\n"		\
-    "    movl %eax, %cr3"                    "\n"			\
-    "    call *%ebx"                         "\n"			\
-    "    jmp 4f"                             "\n"			\
-    "3:     "                                "\n"			\
-    "    movl "CO_ARCH_STATE_STACK_VA"(%ebp), %eax" "\n"		\
-    "    subl %edx, %eax"                    "\n"			\
-    "    subl %eax, %ecx"                    "\n"			\
-    "    subl %eax, %ebp"                    "\n"			\
-    "    subl %eax, (%esp)"                  "\n"			\
-    "    subl %eax, %esp"                    "\n"			\
-									\
-    /* bit31:PG=0 Disable Paging */						\
-    "    movl %cr0, %eax"                    "\n"			\
-    "    andl $0x7fffffff, %eax"             "\n"			\
-    "    movl %eax, %cr0"                    "\n"			\
-									\
-    /* bit5:PAE=1 Enable PAE */						\
-    "    movl "CO_ARCH_STATE_STACK_CR4"(%ecx), %eax"  "\n"		\
-    "    andl $0x00000020, %eax"  "\n"					\
-    "    movl %eax, %cr4" "\n"						\
-    "    movl "CO_ARCH_STATE_STACK_TEMP_CR3"(%ecx), %eax"  "\n"		\
-    "    movl %eax, %cr3" "\n"						\
-									\
-    /* bit31:PG=1 Enable Paging */						\
-    "    movl %cr0, %eax"                    "\n"			\
-    "    orl $0x80000000, %eax"              "\n"			\
-    "    movl %eax, %cr0"                    "\n"			\
-									\
-    "    movl "CO_ARCH_STATE_STACK_VA"(%ecx), %eax" "\n"		\
-    "    subl %edx, %eax"                    "\n"			\
-    "    addl %eax, %esp"                    "\n"			\
-    "    addl %eax, (%esp)"                  "\n"			\
-    "    addl %eax, %ecx"                    "\n"			\
-    "    movl %ecx, %ebp"                    "\n"			\
-    "    ret"                                "\n"			\
-									\
-    "  4:\n"								\
-
-#define PASSAGE_CODE_WRAP_SWITCH(_inner_)				\
-/* read return address and state pointers  */				\
-    "    movl 16(%esp), %ebx" /* return addr */ "\n"			\
-    "    movl 24(%esp), %ebp" /* current */     "\n"			\
-    "    movl 28(%esp), %ecx" /* other */       "\n"			\
-									\
-/* save flags, disable interrupts */					\
-    "    pushfl"                             "\n"			\
-    "    cli"                                "\n"			\
-									\
-/* save and switch from old esp */					\
-    "    movl %esp, "CO_ARCH_STATE_STACK_ESP"(%ebp)"   "\n"		\
-    "    mov %ss, "CO_ARCH_STATE_STACK_SS"(%ebp)"      "\n"		\
-									\
-/* save flags */							\
-    "    movl (%esp), %eax"                  "\n"			\
-    "    movl %eax, "CO_ARCH_STATE_STACK_FLAGS"(%ebp)"    "\n"		\
-									\
-/* save return address */						\
-    "    movl %ebx, "CO_ARCH_STATE_STACK_RETURN_EIP"(%ebp)"   "\n"	\
-									\
-/* save %cs */							        \
-    "    movl %cs, %ebx"                     "\n"			\
-    "    movl %ebx, "CO_ARCH_STATE_STACK_CS"(%ebp)"      "\n"		\
-									\
-    _inner_								\
-									\
-/* get old ESP in EAX */						\
-    "    lss "CO_ARCH_STATE_STACK_ESP"(%ebp), %eax" "\n"		\
-									\
-/* get return address */						\
-    "    movl "CO_ARCH_STATE_STACK_RETURN_EIP"(%ebp), %ebx"  "\n"	\
-    "    movl %ebx, 20(%eax)"                "\n"			\
-									\
-/* get flags */								\
-    "    movl "CO_ARCH_STATE_STACK_FLAGS"(%ebp), %ebx"   "\n"		\
-    "    movl %ebx, (%eax)"                  "\n"			\
-									\
-/* switch to old ESP */							\
-    "    lss "CO_ARCH_STATE_STACK_ESP"(%ebp), %esp"   "\n"		\
-									\
-    "    call 1f"                            "\n"			\
-    "1:  popl %eax"                          "\n"			\
-    "    addl $2f-1b,%eax"                   "\n"			\
-    "    movl 0x04(%ebp), %ebx"              "\n"			\
-    "    movw %bx, -2(%eax)"                 "\n"			\
-    "    movl %eax, -6(%eax)"                "\n"			\
-    "    jmp 3f"                             "\n"			\
-    "3:  ljmp $0,$0"                         "\n"			\
-    "2:  popfl"                              "\n"
-
-#define PASSAGE_PAGE_PRESERVATION_SYSENTER(_inner_)		\
-    "    movl %ecx, %ebx" /* save ecx (other page) */	"\n"	\
-    "    movl $"MSR_IA32_SYSENTER_CS", %ecx"		"\n"	\
-    "    rdmsr"						"\n"	\
-    "    movl %eax, "CO_ARCH_STATE_SYSENTER_CS"(%ebp)"	"\n"	\
-    "    incl %ecx" /* MSR_IA32_SYSENTER_ESP */		"\n"	\
-    "    rdmsr"						"\n"	\
-    "    movl %eax, "CO_ARCH_STATE_SYSENTER_ESP"(%ebp)"	"\n"	\
-    "    incl %ecx" /* MSR_IA32_SYSENTER_EIP */		"\n"	\
-    "    rdmsr"						"\n"	\
-    "    movl %eax, "CO_ARCH_STATE_SYSENTER_EIP"(%ebp)"	"\n"	\
-    "    movl %ebx, %ecx" /* restore ecx */		"\n"	\
-    _inner_							\
-    "    xor %edx, %edx"				"\n"	\
-    "    movl "CO_ARCH_STATE_SYSENTER_CS"(%ebp), %eax"	"\n"	\
-    "    movl $"MSR_IA32_SYSENTER_CS", %ecx"		"\n"	\
-    "    wrmsr"						"\n"	\
-    "    movl "CO_ARCH_STATE_SYSENTER_ESP"(%ebp), %eax"	"\n"	\
-    "    incl %ecx" /* MSR_IA32_SYSENTER_ESP */		"\n"	\
-    "    wrmsr"						"\n"	\
-    "    movl "CO_ARCH_STATE_SYSENTER_EIP"(%ebp), %eax"	"\n"	\
-    "    incl %ecx" /* MSR_IA32_SYSENTER_EIP */		"\n"	\
-    "    wrmsr"						"\n"	\
-
-#define PASSAGE_PAGE_PRESERVATION_DEBUG(_inner_)			\
-/* Put the virtual address of the passage page in EBX */		\
-    "    movl %ebp, %ebx"                    "\n"			\
-    "    andl $0xFFFFF000, %ebx"             "\n"			\
-/*  "    incb 0x20f(%ebx)"                   "\n" */			\
-									\
-/* save DR0 */								\
-    "    movl %dr0, %eax"                    "\n"			\
-    "    movl %eax, "CO_ARCH_STATE_STACK_DR0"(%ebp)"              "\n"	\
-    "    movl %eax, 0x4(%ebx)"               "\n"			\
-									\
-/* save DR1 */								\
-    "    movl %dr1, %eax"                    "\n"			\
-    "    movl %eax, "CO_ARCH_STATE_STACK_DR1"(%ebp)"              "\n"	\
-    "    movl %eax, 0x8(%ebx)"               "\n"			\
-									\
-/* save DR2 */								\
-    "    movl %dr2, %eax"                    "\n"			\
-    "    movl %eax, "CO_ARCH_STATE_STACK_DR2"(%ebp)"              "\n"	\
-    "    movl %eax, 0xc(%ebx)"               "\n"			\
-									\
-/* save DR3 */								\
-    "    movl %dr3, %eax"                    "\n"			\
-    "    movl %eax, "CO_ARCH_STATE_STACK_DR3"(%ebp)"              "\n"	\
-    "    movl %eax, 0x10(%ebx)"              "\n"			\
-									\
-/* save DR6 */								\
-    "    movl %dr6, %eax"                    "\n"			\
-    "    movl %eax, "CO_ARCH_STATE_STACK_DR6"(%ebp)"              "\n"	\
-    "    movl %eax, 0x14(%ebx)"              "\n"			\
-									\
-/* save DR7 */								\
-    "    movl %dr7, %eax"                    "\n"			\
-    "    movl %eax, "CO_ARCH_STATE_STACK_DR7"(%ebp)"              "\n"	\
-    "    movl $0x00000700, %eax"             "\n"			\
-    "    movl %eax, 0x18(%ebx)"              "\n"			\
-    "    movl %eax, %dr7"                    "\n"			\
-									\
-    _inner_								\
-									\
-/* Put the virtual address of the passage page in EBX */		\
-    "    movl %ebp, %ebx"                    "\n"			\
-    "    andl $0xFFFFF000, %ebx"             "\n"			\
-									\
-/* load DR0 */								\
-    "    movl "CO_ARCH_STATE_STACK_DR0"(%ebp), %eax"    "\n"		\
-    "    movl 0x4(%ebx), %ecx"               "\n"			\
-    "    cmpl %eax, %ecx"                    "\n"			\
-    "    jz 1f"                              "\n"			\
-    "    movl %eax, %dr0"                    "\n"			\
-    "1:"                                     "\n"			\
-									\
-/* load DR1 */								\
-    "    movl "CO_ARCH_STATE_STACK_DR1"(%ebp), %eax"    "\n"		\
-    "    movl 0x8(%ebx), %ecx"               "\n"			\
-    "    cmpl %eax, %ecx"                    "\n"			\
-    "    jz 1f"                              "\n"			\
-    "    movl %eax, %dr1"                    "\n"			\
-    "1:"                                     "\n"			\
-									\
-/* load DR2 */								\
-    "    movl "CO_ARCH_STATE_STACK_DR2"(%ebp), %eax"    "\n"		\
-    "    movl 0xC(%ebx), %ecx"               "\n"			\
-    "    cmpl %eax, %ecx"                    "\n"			\
-    "    jz 1f"                              "\n"			\
-    "    movl %eax, %dr2"                    "\n"			\
-    "1:"                                     "\n"			\
-									\
-/* load DR3 */								\
-    "    movl "CO_ARCH_STATE_STACK_DR3"(%ebp), %eax"    "\n"		\
-    "    movl 0x10(%ebx), %ecx"              "\n"			\
-    "    cmpl %eax, %ecx"                    "\n"			\
-    "    jz 1f"                              "\n"			\
-    "    movl %eax, %dr3"                    "\n"			\
-    "1:"                                     "\n"			\
-									\
-/* load DR6 */								\
-    "    movl "CO_ARCH_STATE_STACK_DR6"(%ebp), %eax"    "\n"		\
-    "    movl 0x14(%ebx), %ecx"              "\n"			\
-    "    cmpl %eax, %ecx"                    "\n"			\
-    "    jz 1f"                              "\n"			\
-    "    movl %eax, %dr6"                    "\n"			\
-    "1:"                                     "\n"			\
-									\
-/* load DR7 */								\
-    "    movl "CO_ARCH_STATE_STACK_DR7"(%ebp), %eax"    "\n"		\
-    "    movl 0x18(%ebx), %ecx"              "\n"			\
-    "    cmpl %eax, %ecx"                    "\n"			\
-    "    jz 1f"                              "\n"			\
-    "    movl %eax, %dr7"                    "\n"			\
-    "1:"                                     "\n"			\
-
-#define PASSAGE_PAGE_PRESERVATION_COMMON(_inner_)			\
-/* save GDT */								\
-    "    leal "CO_ARCH_STATE_STACK_GDT"(%ebp), %ebx"        "\n"	\
-    "    sgdt (%ebx)"                        "\n"			\
-									\
-/* save TR */								\
-    "    xor %eax, %eax"                     "\n"			\
-    "    str %ax"                            "\n"			\
-    "    movw %ax, "CO_ARCH_STATE_STACK_TR"(%ebp)"          "\n"	\
-									\
-/*									\
- * If TR is not 0, turn off our task's BUSY bit so we don't get a GPF	\
- * on the way back.							\
- */									\
-    "    cmpw $0, %ax"                       "\n"			\
-    "    jz 1f"                              "\n"			\
-    "    movl 2(%ebx), %edx"                 "\n"			\
-    "    shr $3, %eax      "                 "\n"			\
-    "    andl $0xfffffdff, 4(%edx,%eax,8)"   "\n"			\
-    "1:"                                     "\n"			\
-									\
-/* save LDT */								\
-    "    sldt "CO_ARCH_STATE_STACK_LDT"(%ebp)"                    "\n"	\
-									\
-/* save IDT */								\
-    "    sidt "CO_ARCH_STATE_STACK_IDT"(%ebp)"                    "\n"	\
-									\
-/* save segment registers */						\
-    "    movl %gs, %ebx"                     "\n"			\
-    "    movl %ebx, "CO_ARCH_STATE_STACK_GS"(%ebp)"              "\n"	\
-    "    movl %fs, %ebx"                     "\n"			\
-    "    movl %ebx, "CO_ARCH_STATE_STACK_FS"(%ebp)"              "\n"	\
-    "    movl %ds, %ebx"                     "\n"			\
-    "    movl %ebx, "CO_ARCH_STATE_STACK_DS"(%ebp)"              "\n"	\
-    "    movl %es, %ebx"                     "\n"			\
-    "    movl %ebx, "CO_ARCH_STATE_STACK_ES"(%ebp)"              "\n"	\
-									\
-/* be on the safe side and nullify the segment registers */		\
-    "    movl $0, %ebx"                      "\n"			\
-    "    movl %ebx, %fs"                     "\n"			\
-    "    movl %ebx, %gs"                     "\n"			\
-									\
-/* save CR4 */								\
-    "    movl %cr4, %eax"                    "\n"			\
-    "    movl %eax, "CO_ARCH_STATE_STACK_CR4"(%ebp)"              "\n"	\
-									\
-/* save CR2 */								\
-    "    movl %cr2, %eax"                    "\n"			\
-    "    movl %eax, "CO_ARCH_STATE_STACK_CR2"(%ebp)"              "\n"	\
-									\
-/* save CR0 */								\
-    "    movl %cr0, %eax"                    "\n"			\
-    "    movl %eax, "CO_ARCH_STATE_STACK_CR0"(%ebp)"              "\n"	\
-									\
-/* save CR3 */								\
-    "    movl %cr3, %eax"                    "\n"			\
-    "    movl %eax, "CO_ARCH_STATE_STACK_CR3"(%ebp)"      "\n"		\
-									\
-_inner_									\
-/* load other's CR4 */							\
-    "    movl "CO_ARCH_STATE_STACK_CR4"(%ebp), %eax"              "\n"	\
-    "    movl %eax, %cr4"                    "\n"			\
-									\
-/* load other's CR3 */							\
-    "    movl "CO_ARCH_STATE_STACK_CR3"(%ebp), %eax"              "\n"	\
-    "    movl %eax, %cr3"                    "\n"			\
-									\
-/* load other's CR0 */							\
-    "    movl "CO_ARCH_STATE_STACK_CR0"(%ebp), %eax"              "\n"	\
-    "    movl %eax, %cr0"                    "\n"			\
-									\
-/* load other's CR2 */							\
-    "    movl "CO_ARCH_STATE_STACK_CR2"(%ebp), %eax"              "\n"	\
-    "    movl %eax, %cr2"                    "\n"			\
-									\
-/* load other's GDT */							\
-    "    lgdt "CO_ARCH_STATE_STACK_GDT"(%ebp)"                    "\n"	\
-									\
-/* load IDT */								\
-    "    lidt "CO_ARCH_STATE_STACK_IDT"(%ebp)"                    "\n"	\
-									\
-/* load LDT */								\
-    "    lldt "CO_ARCH_STATE_STACK_LDT"(%ebp)"                    "\n"	\
-									\
-/* load segment registers */						\
-    "    movl "CO_ARCH_STATE_STACK_GS"(%ebp), %ebx"              "\n"	\
-    "    movl %ebx, %gs"                     "\n"			\
-    "    movl "CO_ARCH_STATE_STACK_FS"(%ebp), %ebx"              "\n"	\
-    "    movl %ebx, %fs"                     "\n"			\
-    "    movl "CO_ARCH_STATE_STACK_ES"(%ebp), %ebx"              "\n"	\
-    "    movl %ebx, %es"                     "\n"			\
-    "    movl "CO_ARCH_STATE_STACK_DS"(%ebp), %ebx"              "\n"	\
-    "    movl %ebx, %ds"                     "\n"			\
-    "    movl "CO_ARCH_STATE_STACK_SS"(%ebp), %ebx"              "\n"	\
-    "    movl %ebx, %ss"                     "\n"			\
-									\
-/* load TR */								\
-    "    movw "CO_ARCH_STATE_STACK_TR"(%ebp), %ax"               "\n"	\
-    "    cmpw $0, %ax"                       "\n"			\
-    "    jz 1f"                              "\n"			\
-    "    ltr %ax"                            "\n"			\
-    "1:"                                     "\n"                       \
-
-PASSAGE_CODE_WRAP_IBCS(
-	co_monitor_passage_func_sysenter,
-	PASSAGE_CODE_WRAP_SWITCH(
-		PASSAGE_PAGE_PRESERVATION_SYSENTER(
-			PASSAGE_PAGE_PRESERVATION_DEBUG(
-				PASSAGE_PAGE_PRESERVATION_COMMON(
-					PASSAGE_CODE_NOWHERE_LAND()
-					)
-				)
-			)
-		)
-	)
-
-PASSAGE_CODE_WRAP_IBCS(
-	co_monitor_passage_func,
-	PASSAGE_CODE_WRAP_SWITCH(
-		PASSAGE_PAGE_PRESERVATION_DEBUG(
-			PASSAGE_PAGE_PRESERVATION_COMMON(
-				PASSAGE_CODE_NOWHERE_LAND()
-				)
-			)
-		)
-	)
-
-PASSAGE_CODE_WRAP_IBCS(
-	co_monitor_passage_func_short_sysenter,
-	PASSAGE_CODE_WRAP_SWITCH(
-		PASSAGE_PAGE_PRESERVATION_SYSENTER(
-			PASSAGE_PAGE_PRESERVATION_DEBUG(
-				PASSAGE_PAGE_PRESERVATION_COMMON(
-					PASSAGE_CODE_NOWHERE_LAND_SHORT()
-					)
-				)
-			)
-		)
-	)
-
-PASSAGE_CODE_WRAP_IBCS(
-	co_monitor_passage_func_short,
-	PASSAGE_CODE_WRAP_SWITCH(
-		PASSAGE_PAGE_PRESERVATION_DEBUG(
-			PASSAGE_PAGE_PRESERVATION_COMMON(
-				PASSAGE_CODE_NOWHERE_LAND_SHORT()
-				)
-			)
-		)
-	)
-
 
 co_rc_t co_monitor_arch_passage_page_alloc(co_monitor_t *cmon)
 {
@@ -536,25 +72,25 @@
 
 static inline void co_passage_page_dump_state(co_arch_state_stack_t *state)
 {
-	co_debug("cs: %04lx   ds: %04lx   es: %04lx   fs: %04lx   gs: %04lx   ss: %04lx",
-		 state->cs, state->ds, state->es, state->fs, state->gs, state->ss);
+	co_debug("cs: %04I64x   ds: %04I64x   es: %04I64x   fs: %04I64x   gs: %04I64x   ss: %04I64x",
+		 (int64_t)state->cs, state->ds, (int64_t)state->es, (int64_t)state->fs, (int64_t)state->gs, (int64_t)state->ss);
 
-	co_debug("cr0: %08lx   cr2: %08lx   cr3: %08lx   cr4: %08lx",
-		 state->cr0, state->cr2, state->cr3, state->cr4);
+	co_debug("cr0: %08I64x   cr2: %08I64x   cr3: %08I64x   cr4: %08I64x",
+		 (int64_t)state->cr0, (int64_t)state->cr2, (int64_t)state->cr3, (int64_t)state->cr4);
 
-	co_debug("dr0: %08lx   dr1: %08lx  dr2: %08lx  dr3: %08lx  dr6: %08lx  dr7: %08lx",
-		 state->dr0, state->dr1, state->dr2, state->dr3, state->dr6, state->dr7);
+	co_debug("dr0: %08I64x   dr1: %08I64x  dr2: %08I64x  dr3: %08I64x  dr6: %08I64x  dr7: %08I64x",
+		 (int64_t)state->dr0, (int64_t)state->dr1, (int64_t)state->dr2, (int64_t)state->dr3, (int64_t)state->dr6, (int64_t)state->dr7);
 
-	co_debug("gdt: %08x:%04x   idt:%08x:%04x   ldt:%04x  tr:%04x",
-		 (int)state->gdt.base, state->gdt.limit,
-		 (int)state->idt.table, state->idt.size,
+	co_debug("gdt: %08I64x:%04x   idt:%08I64x:%04x   ldt:%04x  tr:%04x",
+		 (int64_t)state->gdt.base, state->gdt.limit,
+		 (int64_t)state->idt.table, state->idt.size,
 		 state->ldt, state->tr);
 
-	co_debug("return_eip: %08lx   flags: %08lx   esp: %08lx",
-		 state->return_eip, state->flags, state->esp);
+	co_debug("return_eip: %08I64x   flags: %08I64x   esp: %08I64x",
+		 (int64_t)state->return_eip, (int64_t)state->flags, (int64_t)state->esp);
 
-	co_debug("sysenter cs: %08lx    eip: %08lx   esp: %08lx",
-		 state->sysenter_cs, state->sysenter_eip, state->sysenter_esp);
+	co_debug("sysenter cs: %08I64x    eip: %08I64x   esp: %08I64x",
+		 (int64_t)state->sysenter_cs, (int64_t)state->sysenter_eip, (int64_t)state->sysenter_esp);
 }
 
 static inline void co_passage_page_dump(co_arch_passage_page_t *page)
@@ -675,8 +211,9 @@
 co_rc_t co_monitor_arch_passage_page_init(co_monitor_t *cmon)
 {
 	co_arch_passage_page_t *pp = cmon->passage_page;
-	uintptr_t caps;
+	//uintptr_t caps;
 
+/* ...
 	if (co_monitor_passage_func_short_sysenter_size() > sizeof (pp->code))
 		return CO_RC(ERROR);
 	if (co_monitor_passage_func_sysenter_size() > sizeof (pp->code))
@@ -702,6 +239,7 @@
 			memcpy_co_monitor_passage_func(pp->code);
 		}
 	}
+... */
 
 	pp->self_physical_address = co_os_virt_to_phys(&pp->first_page);
 
@@ -777,18 +315,11 @@
 
 void co_host_switch_wrapper(co_monitor_t *cmon)
 {
-	if (co_get_cr4() & CO_ARCH_X86_CR4_VMXE) {
+	// FIXME: W64: Prevent stupid users from running here!
 
-		/*
-		 * An other virtualization is running in VMX mode.
-		 * coLinux does not cooperate with it.
-		 * Abort the guest, but don't crash the host for now.
-		 */
-
-		co_passage_page->operation = CO_OPERATION_TERMINATE;
-		co_passage_page->params[0] = CO_TERMINATE_VMXE;
-		return;
-	}
+	co_passage_page->operation = CO_OPERATION_TERMINATE;
+	co_passage_page->params[0] = CO_TERMINATE_NOT_SUPPORTED;
+	return;
 
-	co_switch();
+	//co_switch();
 }
diff -Naur src/colinux/arch/i386/utils.c src/colinux/arch/x86_64/utils.c
--- src/colinux/arch/i386/utils.c	2022-08-10 11:13:31.754067200 +0800
+++ src/colinux/arch/x86_64/utils.c	2022-08-10 11:13:31.754067200 +0800
@@ -1,8 +1,6 @@
 /*
  * This source code is a part of coLinux source package.
  *
- * Dan Aloni <da-x@colinux.org>, 2003 (c)
- *
  * The code is licensed under the GPL. See the COPYING file at
  * the root directory.
  *
@@ -12,9 +10,9 @@
 
 #include "utils.h"
 
-uintptr_t co_get_cr4(void)
+uint64_t co_get_cr4(void)
 {
-	uintptr_t cr4 = 0;
+	uint64_t cr4 = 0;
 	asm("mov %%cr4, %0" : "=r"(cr4));
 	return cr4;
 }
@@ -24,51 +22,51 @@
 	return co_get_cr4() & 0x20;
 }
 
-uintptr_t co_get_cr3(void)
+uint64_t co_get_cr3(void)
 {
-	uintptr_t cr3 = 0;
+	uint64_t cr3 = 0;
 	asm("mov %%cr3, %0" : "=r"(cr3));
 	return cr3;
 }
 
-uintptr_t co_get_dr0(void)
+uint64_t co_get_dr0(void)
 {
-	uintptr_t reg = 0;
+	uint64_t reg = 0;
 	asm("mov %%dr0, %0" : "=r"(reg));
 	return reg;
 }
 
-uintptr_t co_get_dr1(void)
+uint64_t co_get_dr1(void)
 {
-	uintptr_t reg = 0;
+	uint64_t reg = 0;
 	asm("mov %%dr1, %0" : "=r"(reg));
 	return reg;
 }
 
-uintptr_t co_get_dr2(void)
+uint64_t co_get_dr2(void)
 {
-	uintptr_t reg = 0;
+	uint64_t reg = 0;
 	asm("mov %%dr2, %0" : "=r"(reg));
 	return reg;
 }
 
-uintptr_t co_get_dr3(void)
+uint64_t co_get_dr3(void)
 {
-	uintptr_t reg = 0;
+	uint64_t reg = 0;
 	asm("mov %%dr3, %0" : "=r"(reg));
 	return reg;
 }
 
-uintptr_t co_get_dr6(void)
+uint64_t co_get_dr6(void)
 {
-	uintptr_t reg = 0;
+	uint64_t reg = 0;
 	asm("mov %%dr6, %0" : "=r"(reg));
 	return reg;
 }
 
-uintptr_t co_get_dr7(void)
+uint64_t co_get_dr7(void)
 {
-	uintptr_t reg = 0;
+	uint64_t reg = 0;
 	asm("mov %%dr7, %0" : "=r"(reg));
 	return reg;
 }
diff -Naur src/colinux/arch/i386/utils.h src/colinux/arch/x86_64/utils.h
--- src/colinux/arch/i386/utils.h	2022-08-10 11:13:31.754067200 +0800
+++ src/colinux/arch/x86_64/utils.h	2022-08-10 11:13:31.754067200 +0800
@@ -1,25 +1,24 @@
 /*
  * This source code is a part of coLinux source package.
  *
- * Dan Aloni <da-x@colinux.org>, 2003 (c)
- *
  * The code is licensed under the GPL. See the COPYING file at
  * the root directory.
  */
 
-#ifndef __COLINUX_ARCH_I386_UTILS_H__
-#define __COLINUX_ARCH_I386_UTILS_H__
+#pragma once
+#ifndef __COLINUX_ARCH_X86_64_UTILS_H__
+#define __COLINUX_ARCH_X86_64_UTILS_H__
 
 #include <colinux/common/common.h>
 
 extern bool_t co_is_pae_enabled(void);
-extern uintptr_t co_get_cr3(void);
-extern uintptr_t co_get_cr4(void);
-extern uintptr_t co_get_dr0(void);
-extern uintptr_t co_get_dr1(void);
-extern uintptr_t co_get_dr2(void);
-extern uintptr_t co_get_dr3(void);
-extern uintptr_t co_get_dr6(void);
-extern uintptr_t co_get_dr7(void);
+extern uint64_t co_get_cr3(void);
+extern uint64_t co_get_cr4(void);
+extern uint64_t co_get_dr0(void);
+extern uint64_t co_get_dr1(void);
+extern uint64_t co_get_dr2(void);
+extern uint64_t co_get_dr3(void);
+extern uint64_t co_get_dr6(void);
+extern uint64_t co_get_dr7(void);
 
 #endif
